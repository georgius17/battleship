{"version":3,"sources":["components/Ship.module.css","App.module.css","modules/Constants.js","components/Board.js","factories/Gameboard.js","factories/ShipFactory.js","components/Ship.js","App.js","serviceWorker.js","index.js","components/Board.module.css"],"names":["module","exports","ItemTypes","Board","props","useState","gridTarget","setGridTarget","useDrop","accept","collect","monitor","isOver","canDrop","type","drop","item","component","dropped","grid","map","gridItem","ref","onDrop","index","className","sunk","classes","gridItemSunkShip","hit","gridHittedItem","ship","join","gridItemShip","key","gridInvisibleItem","onClick","clicked","gridContainer","Gameboard","i","shipsInfo","0","1","2","3","4","x","y","coordinates","String","fromCharCode","push","getGrid","placeShips","n","orientation","firstGridIndex","firstIndex","length","id","freeIndexController","gridIndex","shipIndex","shipLen","gridIdConv","Math","floor","duplicateAttackHandler","aiAttackHandler","enemyShips","sunkShipsIds","forEach","unknownShips","surroundingIndex","damagedBoat","priority","includes","indexOf","boatIndex","tryUp","console","log","tryDown","tryRight","tryLeft","randomTarget","random","attackHandler","checkSunkedShips","ShipFactory","ships","name","YIndex","XIndex","placed","sunkShip","flipShip","hitShip","Ship","shipArray","shipPart","setShipPart","useDrag","isDragging","drag","onMouseEnter","onMouseLeave","shipPartHovered","shipBody","App","useCallback","shipsArray","isPlaying","activePlayer","winner","gameState","setGameState","playerBoard","playerShips","containerShips","playerState","setPlayerState","computerBoard","computerShips","computerState","computerAttackHandler","targetIndex","shipHitted","gameOverHandler","useEffect","timer","setTimeout","clearTimeout","computerWinner","every","playerWinner","flipButton","flipBtn","prevState","containerBoard","Container","Disable","DndProvider","backend","HTML5Backend","gameContainer","gameProperties","boardContainer","target","filter","dropShipHandler","playerAttackHandler","startBtn","DisableBtn","randomIndex","randomOrientation","resetBtn","window","location","reload","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.055fe8d3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"shipPart\":\"Ship_shipPart__K8Gey\",\"shipPartHovered\":\"Ship_shipPartHovered__uS5Mc\",\"hoverShip\":\"Ship_hoverShip__35sgE\",\"shipBody\":\"Ship_shipBody__N3a2H\",\"X\":\"Ship_X__vlDYK\",\"Y\":\"Ship_Y__2s760\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"winner\":\"App_winner__30_-M\",\"boardContainer\":\"App_boardContainer__2ZQPz\",\"Container\":\"App_Container__10KOh\",\"Disable\":\"App_Disable__du_WH\",\"containerDisable\":\"App_containerDisable__3lxJj\",\"DisableBtn\":\"App_DisableBtn__29Nii\",\"buttonDisable\":\"App_buttonDisable__3luh_\",\"gameContainer\":\"App_gameContainer__2NvQs\",\"gameProperties\":\"App_gameProperties__1C3Qq\",\"flipBtn\":\"App_flipBtn__2kiL2\",\"startBtn\":\"App_startBtn__1bdxB\",\"resetBtn\":\"App_resetBtn__14bY2\"};","export const ItemTypes = {\n    SHIP_ITEM: 'ship_item'\n  }","import React, { useState } from 'react';\nimport classes from './Board.module.css';\nimport { useDrop } from 'react-dnd';\nimport { ItemTypes } from '../modules/Constants';\n\nconst Board = props => {\n\n    const [gridTarget, setGridTarget] = useState(null)\n    \n\n    const[{isOver}, drop] = useDrop({\n        accept: ItemTypes.SHIP_ITEM,\n        collect: monitor => ({\n            isOver: !!monitor.isOver(),\n            canDrop: props.type === \"grid\"\n        }),\n        drop: (item, monitor, component) =>props.type===\"grid\" ? props.dropped(item, gridTarget) : null\n    })\n    \n\n    const grid = props.grid.map(gridItem => {\n        //console.log(gridItem.ship)\n        if (props.type === \"grid\") {\n           return (\n                <div ref={drop} \n                    onDrop={()=>setGridTarget(gridItem.index)} \n                    className={ gridItem.sunk ? classes.gridItemSunkShip : gridItem.hit ? [classes.gridHittedItem, classes[gridItem.ship]].join(' ') : gridItem.ship ? classes.gridItemShip : classes.gridItem } \n                    key={gridItem.index} \n                    > \n                </div>\n            ) \n        } else if (props.type === \"computer\") {\n            return (\n                <div \n                    className={ gridItem.sunk ? classes.gridItemSunkShip : gridItem.hit ? [classes.gridHittedItem, classes[gridItem.ship]].join(' ') : classes.gridInvisibleItem } \n                    key={gridItem.index}\n                    onClick={()=>props.clicked(gridItem.index)} \n                    > \n                </div>\n            ) \n        }    \n    })\n        //console.log(props.type)\n    return (\n        <div ref={drop} className={ classes.gridContainer} >\n            {grid}\n        </div>\n    )\n}\n\nexport default Board;","const Gameboard = (type) => {\n\n    let grid = [];\n    let i = 0;\n    let shipsInfo = {\n        0: [],\n        1: [],\n        2: [],\n        3: [],\n        4: []\n    }\n\n    for (let x = 65; x < 75; x++ ) {\n        for (let y = 1; y < 11; y++){\n            let gridItem = {\n                index: i,\n                coordinates: String.fromCharCode(x) + y,\n                hit: false,\n                ship: false,\n                sunk: false\n            }\n            grid.push(gridItem);\n            i++;\n        }\n    }\n\n    const duplicateAttackHandler = (index) => {\n        if (grid[index].hit){\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    //For player purpose -> computer checks and marks sunk items via aiAttackHandler\n    const checkSunkedShips = (enemyShips) => {\n        enemyShips.forEach(ship => {\n            if (ship.ship.sunk){\n                let firstIndex = ship.ship.firstIndex;\n                let n = ship.ship.orientation === \"X\" ? 1 : 10;\n                for (let i=0; i<ship.ship.length; i++){\n                    grid[firstIndex].sunk = true;\n                    firstIndex = firstIndex + n;\n                }\n            }\n        })\n    }\n\n\n    const aiAttackHandler = (enemyShips) => {\n        //console.log('AI ATTACK HANDLER')\n        \n        //First find out which ships are already sunk, save their IDs and mark the grid\n        let sunkShipsIds = [];\n\n        enemyShips.forEach(ship => {\n            if (ship.ship.sunk){\n                let firstIndex = ship.ship.firstIndex;\n                let n = ship.ship.orientation === \"X\" ? 1 : 10;\n                for (let i=0; i<ship.ship.length; i++){\n                    sunkShipsIds.push(firstIndex);\n                    grid[firstIndex].sunk = true;\n                    firstIndex = firstIndex + n;\n                }\n            }\n        })\n        //console.log(sunkedShipsIds)\n\n        let unknownShips = true;\n        let surroundingIndex = null;\n        let damagedBoat = null;\n        let priority = \"Y\";\n        \n        //Find grid item ID which contains a ship, is hitted, but is not present in sunkedShipsIds \n        for (let item of grid){\n            //console.log(item)\n            if (item.hit && item.ship && !sunkShipsIds.includes(grid.indexOf(item))){\n               \n                unknownShips = false;\n                //Found grid item with unsunked boat\n                let boatIndex = grid.indexOf(item)\n                //console.log(boatIndex)\n\n                    if (boatIndex > 9){\n                        if (grid[boatIndex-10].ship && grid[boatIndex-10].hit){\n                            priority = \"Y\";\n                            let tryUp = boatIndex-10;\n                            while (tryUp > 0){\n                                console.log(tryUp)\n                                if (grid[tryUp].hit === false){\n                                    damagedBoat = tryUp;\n                                    break\n                                } \n                                if (grid[tryUp].hit && !grid[tryUp].ship) break;\n\n                                tryUp = tryUp -10;\n                            }\n                        } else if (!grid[boatIndex-10].hit && priority === \"Y\" ){\n                            surroundingIndex = boatIndex - 10;\n                        }\n                    }\n\n                    if (boatIndex < 90 ){\n                        if (grid[boatIndex+10].ship && grid[boatIndex+10].hit){\n                            priority = \"Y\"\n                            let tryDown = boatIndex + 10;\n                            while (tryDown<100){\n                                console.log(tryDown)\n                                if (grid[tryDown].hit === false){\n                                    damagedBoat = tryDown;\n                                    break\n                                }\n                                if (grid[tryDown].hit && !grid[tryDown].ship) break;\n\n                                tryDown = tryDown + 10;\n\n                            }\n                        } else if (!grid[boatIndex+10].hit && priority === \"Y\" ){\n                            surroundingIndex = boatIndex + 10;\n                        }\n                    }\n\n                    if (surroundingIndex === null) priority=\"X\";\n\n                    if (boatIndex%10 < 9){\n                        if (grid[boatIndex+1].ship && grid[boatIndex+1].hit){\n                            priority = \"X\";\n                            let tryRight = boatIndex + 1;\n                            while (tryRight%10 < 10 && tryRight%10 > 0){\n                                console.log(tryRight)\n                                if (grid[tryRight].hit === false){\n                                    damagedBoat = tryRight;\n                                    break;\n                                } \n                                if (grid[tryRight].hit && !grid[tryRight].ship) break;\n                                tryRight = tryRight +1;\n                                \n                            }\n                        } else if (!grid[boatIndex+1].hit && priority === \"X\" ){\n                            surroundingIndex = boatIndex + 1;\n                        }\n                    }\n                    \n                    if (boatIndex%10 > 0){\n                        if (grid[boatIndex-1].ship && grid[boatIndex-1].hit){\n                            priority = \"X\";\n                            let tryLeft = boatIndex -1;\n                            while (tryLeft%10 !== -1 ){\n                                console.log(tryLeft)\n                                if (grid[tryLeft].hit === false){\n                                    damagedBoat = tryLeft;\n                                    break\n                                } \n                                if (grid[tryLeft].hit && !grid[tryLeft].ship) break;\n                                tryLeft = tryLeft -1;\n                                \n                            }\n                        } else if (!grid[boatIndex-1].hit && priority === \"X\"){\n                            surroundingIndex = boatIndex - 1;\n                        }\n                    }\n                \n            break   \n            }\n        }\n        //console.log(damagedBoat);\n        //console.log(surroundingIndex);\n        if (damagedBoat !== null) {\n            return damagedBoat\n        } else if (damagedBoat === null && surroundingIndex !== null){\n            return surroundingIndex\n        } else if (unknownShips || (damagedBoat=== null && surroundingIndex === null)){\n            let randomTarget = Math.floor(Math.random()*100);\n            while (grid[randomTarget].hit){\n                randomTarget = Math.floor(Math.random()*100);\n            }\n            //console.log(randomTarget)\n            return randomTarget\n        }\n        \n    }\n\n    const attackHandler = (index) => {\n        grid[index].hit = true;\n\n        if (grid[index].ship){\n            for (let ship in shipsInfo){\n                if (shipsInfo[ship].includes(index)){\n                return ship\n                }\n            }   \n        } else return false;\n        \n    }\n\n    const getGrid = () => grid;\n\n    const placeShips = (ship) => {\n\n        //orientation horizontal or vertical\n        let n = ship.ship.orientation === \"X\" ? 1 : 10;    \n        let firstGridIndex = ship.ship.firstIndex;\n\n        //mark the grid IDs which contains the boat \n        for (let i=0; i<ship.ship.length; i++){\n            grid[firstGridIndex].ship = true;\n            shipsInfo[ship.ship.id].push(firstGridIndex)\n            firstGridIndex = firstGridIndex+n;\n            }\n    }\n\n\n    const freeIndexController = (gridIndex, shipIndex , shipLen, orientation) => {\n\n        let gridIdConv = orientation === \"X\" ? gridIndex % 10 : Math.floor(gridIndex / 10);\n                                                    \n        if (shipIndex <= gridIdConv && gridIdConv <= (10-shipLen+shipIndex)){\n                \n            let n = orientation === \"X\" ? 1 : 10;\n            let index = gridIndex-(shipIndex * n);\n            for (let i=0; i < shipLen; i++ ){\n                if (grid[index].ship === true){\n                    return false\n                }\n            //console.log(grid[index])\n            index = index + n;\n            }\n            return true;\n\n            } else {\n                return false;\n            }\n    }\n\n    \n\n\n    return {\n        getGrid,\n        placeShips,\n        freeIndexController,\n        duplicateAttackHandler,\n        aiAttackHandler,\n        attackHandler,\n        checkSunkedShips\n    }\n}\n\nexport default Gameboard;","const ShipFactory = (i) => {\n\n    const ships = [\n        {name: \"carrier\", length: 5, YIndex: \"A1\", XIndex: \"A1\" },\n        {name: \"battleship\", length: 4, YIndex: \"A3\", XIndex: \"B1\" },\n        {name: \"cruiser\", length: 3, YIndex: \"A5\", XIndex: \"C1\" },\n        {name: \"submarine\", length: 3, YIndex: \"A7\", XIndex: \"D1\" },\n        {name: \"destroyer\", length: 2, YIndex: \"A9\", XIndex: \"E1\" }\n    ]\n        // carrier: 5,\n        // battleship: 4,\n        // cruiser: 3,\n        // submarine: 3,\n        // destroyer: 2\n    \n    let ship = {\n        name: ships[i].name,\n        length: ships[i].length,\n        placed: false,\n        sunk: false,\n        hit: 0,\n        firstIndex: ships[i].YIndex,\n        orientation: \"Y\",\n        id: i\n    }\n\n    const hitShip = () => {\n        ship.hit = ship.hit + 1; \n        sunkShip()\n    }\n\n    const sunkShip = () => {\n        if (ship.hit === ship.length){\n            ship.sunk = true;\n        }\n    }\n\n    const flipShip = () => {\n        ship.orientation = ship.orientation === \"X\" ? \"Y\" : \"X\";\n        //ship.firstIndex = ship.orientation === \"X\" ? ships[n].XIndex : ships[n].YIndex; \n    }\n\n    return {\n        ship,\n        flipShip,\n        hitShip\n    }\n}\n\n\nexport default ShipFactory;","import React, {useState } from 'react';\nimport classes from './Ship.module.css';\nimport { useDrag } from 'react-dnd';\nimport { ItemTypes } from '../modules/Constants';\n\nconst Ship = props => {\n   // console.log(props.ship.ship.length)\n    const shipArray = [];\n\n    const [shipPart, setShipPart] = useState(null)\n\n    const [{ isDragging }, drag] = useDrag({\n        item: {\n            type: ItemTypes.SHIP_ITEM,\n            id: shipPart\n        },\n        collect: monitor => ({\n            isDragging: !!monitor.isDragging()\n        })\n    })\n\n\n    // const inputClasses = [classes.InputElement];\n\n    // if (props.invalid && props.shouldValidate && props.touched ){\n    //     inputClasses.push(classes.Invalid);\n    // }\n\n    //className={[classes.shipBody, classes[props.ship.ship.orientation]].join(' ')}\n\n    if (props.ship){\n        for (let i=0; i<props.ship.ship.length; i++){\n            shipArray.push({id: props.ship.ship.name[2]+i})\n        //shipArray.push({id: props.ship+i})\n        }\n    } else return null\n     \n    const ship = shipArray.map(item=>{\n        //console.log(item.id)\n        return <div \n        onMouseEnter={()=>setShipPart(item.id)} \n        onMouseLeave={()=> setShipPart(null)}\n        className={ shipPart === item.id ? classes.shipPartHovered : classes.shipPart  } \n        key={item.id} ></div>\n    })\n\n    return (\n       <div \n            className={[classes.shipBody, classes[props.ship.ship.orientation]].join(' ')}\n            ref={drag} >\n           {ship}\n       </div>\n    )\n}\n\nexport default Ship;","import React, { useEffect, useCallback } from 'react';\nimport {useState} from 'react';\nimport classes from './App.module.css';\nimport Board from './components/Board';\nimport Gameboard from './factories/Gameboard';\nimport ShipFactory from './factories/ShipFactory';\nimport Ship from './components/Ship';\nimport { DndProvider } from 'react-dnd';\nimport {HTML5Backend} from 'react-dnd-html5-backend';\n\n\nfunction App() {\n\n  ////////////STATES////////////\n\n  const placeShips = useCallback(() => {\n    let shipsArray = [];\n    for (let i=0; i<5; i++) {\n      shipsArray.push(ShipFactory(i))\n    }\n    return shipsArray\n  })\n\n  const [ gameState, setGameState ] = useState({\n    isPlaying: false,\n    activePlayer: null,\n    winner: null\n  })\n\n  const [ playerState, setPlayerState ] = useState({ \n    playerBoard: Gameboard(), \n    playerShips: [],\n    containerShips: placeShips()\n    })\n  \n  const [ computerState, setComputerState ] = useState({\n    computerBoard: Gameboard(),\n    computerShips : placeShips()\n  })\n\n  //////////////////////////////\n\n  const computerAttackHandler = useCallback(() => {\n    if (gameState.isPlaying && gameState.activePlayer === \"computer\"){\n       let targetIndex =  playerState.playerBoard.aiAttackHandler(playerState.playerShips)\n       //console.log(targetIndex);\n\n       //Attack handler mark the target grid ID as hit= true,\n       //return true if the ID contained ship -> continue attacking\n       let shipHitted = playerState.playerBoard.attackHandler(targetIndex);\n       \n\n       if (shipHitted !== false){\n         //console.log('HITTED USERS SHIP')\n         playerState.playerShips[shipHitted].hitShip()\n\n         setGameState({\n          winner: null,\n          isPlaying: true,\n          activePlayer: \"computer\"\n        })\n\n        if (playerState.playerShips[shipHitted].ship.sunk) gameOverHandler()\n\n       } else {\n         //console.log('FAILED TO HIT USERS SHIP')\n        setGameState({\n          winner: null,\n          isPlaying: true,\n          activePlayer: \"user\"\n       })\n    } \n  }}\n)\n  //COMPONENT DID UPDATE - based on activePlayer\n  useEffect(() => {\n    if (gameState.isPlaying && gameState.activePlayer === \"computer\"){\n      //console.log(\"COMPUTER ATTACK EFFECT\")\n      let timer = setTimeout(() => {\n      computerAttackHandler()\n    }, 1000)\n    return () => { \n      clearTimeout(timer)\n    }\n    }\n  }, [gameState.activePlayer, gameState.isPlaying, computerAttackHandler]);\n\n\n  const gameOverHandler = () => {\n      let computerWinner = playerState.playerShips.every( ship => ship.ship.sunk === true);\n      let playerWinner = computerState.computerShips.every( ship => ship.ship.sunk === true);\n      console.log('GAME OVER HANDLER')\n      console.log(computerWinner);\n      console.log(playerWinner);\n      if (computerWinner){\n        setGameState({\n          winner: 'computer',\n          isPlaying: false\n          })\n      }\n\n      if (playerWinner){\n        setGameState({\n          winner: 'user',\n          isPlaying: false\n          })\n      }\n  }\n\n  const flipShipOrientation = () => {\n    //console.log(\"FLIP\");\n    playerState.containerShips.forEach(ship =>{\n      ship.flipShip()\n    })\n    setPlayerState(prevState => ({\n      ...prevState\n    }))\n  }\n\n  const dropShipHandler = (item, target) => {\n    //console.log(item)\n    //console.log(target)\n\n    playerState.containerShips.forEach(ship => {\n      //console.log(ship.ship.name[2])\n      if (ship.ship.name[2] === item.id[0]){\n        //console.log (ship.ship.name)\n        \n        //Check if it is possible to put the boat on the grid -> gridIndex(0-99), shipIndex(0-4) , shipLen(1-5), orientation (X/Y)\n        if (playerState.playerBoard.freeIndexController(target, item.id[1], ship.ship.length, ship.ship.orientation) === true) {\n          ship.ship.placed = true;\n\n          let n = ship.ship.orientation === \"X\" ? 1 : 10\n\n          ship.ship.firstIndex = target - (item.id[1] * n)\n          //ship.ship.id = playerState.containerShips.indexOf(ship)\n          ship.ship.id = playerState.playerShips.length;\n\n          playerState.playerBoard.placeShips(ship)\n\n          setPlayerState(prevState => ({\n            ...prevState,\n            playerShips : [...prevState.playerShips, ship],\n            containerShips: prevState.containerShips.filter(item => item !== ship)\n          }))\n        }\n      }\n    })\n  }\n\n  const placeComputerShips = () => {\n    computerState.computerShips.forEach(ship => {\n      while (ship.ship.placed !== true){\n        let randomIndex = Math.floor(Math.random()*100)\n        let randomOrientation = Math.floor(Math.random()*10) < 5 ? \"X\" : \"Y\"\n        if (computerState.computerBoard.freeIndexController(randomIndex, 0, ship.ship.length, randomOrientation) === true){\n          ship.ship.firstIndex = randomIndex;\n          ship.ship.orientation = randomOrientation;\n          ship.ship.placed = true;\n          computerState.computerBoard.placeShips(ship)\n        }  \n      }\n    })\n  }\n\n  const startGameHandler = () => {\n    if (playerState.containerShips.length === 0){\n      console.log('START PLAYING')\n      //randomly place computer ships !\n      placeComputerShips();\n      \n      setGameState({\n        winner: null,\n        isPlaying: true,\n        activePlayer: \"user\"\n      })\n    } else console.log('PLACE ALL SHIPS')\n  }\n\n  const resetGameHandler = () => {\n    window.location.reload();\n    return false;\n  }\n\n  const playerAttackHandler = (target) => {\n    //console.log(target)\n\n    //Check if is the user allowed to attack && check dupplicate attack\n    if (gameState.isPlaying && gameState.activePlayer === \"user\"){\n      if (computerState.computerBoard.duplicateAttackHandler(target)){\n        let shipHitted = computerState.computerBoard.attackHandler(target);\n\n        if (shipHitted !== false){\n          computerState.computerShips[shipHitted].hitShip()\n          computerState.computerBoard.checkSunkedShips(computerState.computerShips)\n\n          setGameState({\n          winner: null,\n          isPlaying: true,\n          activePlayer: \"user\"\n        })\n          if (computerState.computerShips[shipHitted].ship.sunk) gameOverHandler()\n\n        } else {\n          setGameState({\n            winner: null,\n            isPlaying: true,\n            activePlayer: \"computer\"\n          })\n        }\n      }\n    }\n  }\n\nlet flipButton = playerState.containerShips.length > 0 ? \n                    <button className={classes.flipBtn} onClick={flipShipOrientation}> FLIP</button> :\n                    null;\n\nlet containerBoard = gameState.winner === null ? \n        <div className={ gameState.isPlaying? [classes.Container, classes.Disable].join(' ') : classes.Container } >\n            <Ship ship={playerState.containerShips[0]}  />\n            <Ship ship={playerState.containerShips[1]}  />\n            <Ship ship={playerState.containerShips[2]}  />\n            <Ship ship={playerState.containerShips[3]}  />\n            <Ship ship={playerState.containerShips[4]}  />\n            {flipButton}\n        </div> : gameState.winner === \"user\" ? <h2 className={classes.winner} > All computers boats have been sunk. You won! </h2> :\n                gameState.winner === \"computer\" ? <h2 className={classes.winner} > All your boats have been sunk. You lost! </h2> : null;\n\n\n  return (\n    <DndProvider backend={HTML5Backend} >\n      <div className={classes.gameContainer} >\n        \n        \n        <div className={classes.gameProperties}> \n          <h1>Battleship </h1>\n          <h2>Player:</h2>\n          <h2>Computer:</h2>\n          <div className={classes.boardContainer}>\n            <Board \n              dropped = {(item, target)=>dropShipHandler(item, target)}\n              ships={playerState.playerShips} \n              type={\"grid\"}\n              grid={playerState.playerBoard.getGrid()} \n              />\n            <Board \n              clicked = {target => playerAttackHandler(target)}\n              grid={computerState.computerBoard.getGrid()}\n              type={\"computer\"}\n              ships={computerState.computerShips}  \n              />\n          </div> \n        </div>\n\n      {containerBoard}\n      {gameState.winner === null ? <button className={ gameState.isPlaying? [classes.startBtn, classes.DisableBtn].join(' '): classes.startBtn } \n                onClick={startGameHandler}> \n                Start game \n        </button> : null}\n        \n        <button className={classes.resetBtn} onClick={resetGameHandler}> Reset</button>\n      </div>\n      \n      </DndProvider>\n\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"gridContainer\":\"Board_gridContainer__1zzkP\",\"gridItem\":\"Board_gridItem__2Huac\",\"gridItemShip\":\"Board_gridItemShip__3rXEu\",\"gridHittedItem\":\"Board_gridHittedItem__3Soft\",\"gridItemSunkShip\":\"Board_gridItemSunkShip__2lqlR\",\"sunkShip\":\"Board_sunkShip__3sNWI\",\"true\":\"Board_true__1JjE7\",\"gridInvisibleItem\":\"Board_gridInvisibleItem__muHI_\"};"],"sourceRoot":""}